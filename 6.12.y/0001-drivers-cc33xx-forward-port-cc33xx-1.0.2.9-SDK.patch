From c3c3a957530dd6684d97cf83e19ed5181f4aab5e Mon Sep 17 00:00:00 2001
From: Sabeeh Khan <sabeeh-khan@ti.com>
Date: Wed, 30 Jul 2025 16:54:52 -0500
Subject: [PATCH] drivers: cc33xx: forward port cc33xx 1.0.2.9 SDK

---
 arch/arm/configs/multi_v7_defconfig    |  3 +++
 arch/arm64/configs/defconfig           |  7 +++++--
 drivers/bluetooth/btti_uart.c          |  3 +--
 drivers/net/wireless/ti/Makefile       |  1 +
 drivers/net/wireless/ti/cc33xx/boot.c  |  1 +
 drivers/net/wireless/ti/cc33xx/event.c |  4 ++--
 drivers/net/wireless/ti/cc33xx/main.c  | 17 +++++++++--------
 net/mac80211/mlme.c                    | 23 -----------------------
 net/mac80211/util.c                    |  1 +
 9 files changed, 23 insertions(+), 37 deletions(-)

diff --git a/arch/arm/configs/multi_v7_defconfig b/arch/arm/configs/multi_v7_defconfig
index 9a5f5c439b87..90b40bb43ffe 100644
--- a/arch/arm/configs/multi_v7_defconfig
+++ b/arch/arm/configs/multi_v7_defconfig
@@ -1325,3 +1325,6 @@ CONFIG_CMA_SIZE_MBYTES=64
 CONFIG_PRINTK_TIME=y
 CONFIG_MAGIC_SYSRQ=y
 CONFIG_DEBUG_FS=y
+CONFIG_CC33XX=m
+CONFIG_CC33XX_SDIO=m
+CONFIG_BT_TI_UART=m
diff --git a/arch/arm64/configs/defconfig b/arch/arm64/configs/defconfig
index f988dd79add8..bc667dfbe166 100644
--- a/arch/arm64/configs/defconfig
+++ b/arch/arm64/configs/defconfig
@@ -430,8 +430,11 @@ CONFIG_MWIFIEX_SDIO=m
 CONFIG_MWIFIEX_PCIE=m
 CONFIG_MT7921E=m
 CONFIG_RSI_91X=m
-CONFIG_WL18XX=m
-CONFIG_WLCORE_SDIO=m
+CONFIG_WL18XX=n
+CONFIG_WLCORE_SDIO=n
+CONFIG_CC33XX=m
+CONFIG_CC33XX_SDIO=m
+CONFIG_BT_TI_UART=m
 CONFIG_WWAN=m
 CONFIG_MHI_WWAN_CTRL=m
 CONFIG_MHI_WWAN_MBIM=m
diff --git a/drivers/bluetooth/btti_uart.c b/drivers/bluetooth/btti_uart.c
index 62e52ac5fad9..4ac8ded57b5b 100644
--- a/drivers/bluetooth/btti_uart.c
+++ b/drivers/bluetooth/btti_uart.c
@@ -19,7 +19,6 @@
 #include <linux/pm_runtime.h>
 #include <linux/gpio/consumer.h>
 #include <linux/pinctrl/consumer.h>
-#include <asm/unaligned.h>
 
 #include <net/bluetooth/bluetooth.h>
 #include <net/bluetooth/hci_core.h>
@@ -459,7 +458,7 @@ static int btti_uart_wakeup_event_match(struct serdev_device *serdev,
 	return count;
 }
 
-static int btti_uart_receive_buf(struct serdev_device *serdev, const u8 *data,
+static size_t btti_uart_receive_buf(struct serdev_device *serdev, const u8 *data,
 			      size_t count)
 {
 	struct btti_uart_dev *bdev = serdev_device_get_drvdata(serdev);
diff --git a/drivers/net/wireless/ti/Makefile b/drivers/net/wireless/ti/Makefile
index 05ee016594f8..4356f58b4b98 100644
--- a/drivers/net/wireless/ti/Makefile
+++ b/drivers/net/wireless/ti/Makefile
@@ -3,3 +3,4 @@ obj-$(CONFIG_WLCORE)			+= wlcore/
 obj-$(CONFIG_WL12XX)			+= wl12xx/
 obj-$(CONFIG_WL1251)			+= wl1251/
 obj-$(CONFIG_WL18XX)			+= wl18xx/
+obj-$(CONFIG_CC33XX)			+= cc33xx/
diff --git a/drivers/net/wireless/ti/cc33xx/boot.c b/drivers/net/wireless/ti/cc33xx/boot.c
index a80f73a19b01..fc5f60e352ec 100644
--- a/drivers/net/wireless/ti/cc33xx/boot.c
+++ b/drivers/net/wireless/ti/cc33xx/boot.c
@@ -8,6 +8,7 @@
  */
 
 #include <linux/firmware.h>
+#include <linux/vmalloc.h>
 
 #include "boot.h"
 #include "cmd.h"
diff --git a/drivers/net/wireless/ti/cc33xx/event.c b/drivers/net/wireless/ti/cc33xx/event.c
index 5275348eb617..2f338de382e0 100644
--- a/drivers/net/wireless/ti/cc33xx/event.c
+++ b/drivers/net/wireless/ti/cc33xx/event.c
@@ -238,11 +238,11 @@ void cc33xx_event_channel_switch(struct cc33xx *wl,
 		vif = cc33xx_wlvif_to_vif(wlvif);
 
 		if (wlvif->bss_type == BSS_TYPE_STA_BSS) {
-			ieee80211_chswitch_done(vif, success);
+			ieee80211_chswitch_done(vif, success, 0);
 			cancel_delayed_work(&wlvif->channel_switch_work);
 		} else {
 			set_bit(WLVIF_FLAG_BEACON_DISABLED, &wlvif->flags);
-			ieee80211_csa_finish(vif);
+			ieee80211_csa_finish(vif, 0);
 		}
 	}
 }
diff --git a/drivers/net/wireless/ti/cc33xx/main.c b/drivers/net/wireless/ti/cc33xx/main.c
index 8fc6a472f0d6..1d86e9bfbcab 100644
--- a/drivers/net/wireless/ti/cc33xx/main.c
+++ b/drivers/net/wireless/ti/cc33xx/main.c
@@ -2130,7 +2130,7 @@ static void cc33xx_turn_off(struct cc33xx *wl)
 	mutex_unlock(&wl->mutex);
 }
 
-static inline void cc33xx_op_stop(struct ieee80211_hw *hw)
+static inline void cc33xx_op_stop(struct ieee80211_hw *hw, bool suspend)
 {
 	cc33xx_debug(DEBUG_MAC80211, "mac80211 stop");
 	return;
@@ -2159,7 +2159,7 @@ static void cc33xx_channel_switch_work(struct work_struct *work)
 		goto out;
 
 	vif = cc33xx_wlvif_to_vif(wlvif);
-	ieee80211_chswitch_done(vif, false);
+	ieee80211_chswitch_done(vif, false, 0);
 
 	cc33xx_cmd_stop_channel_switch(wl, wlvif);
 
@@ -2864,7 +2864,7 @@ static int wlcore_set_assoc(struct cc33xx *wl, struct cc33xx_vif *wlvif,
 	int ret;
 
 	wlvif->aid = vif->cfg.aid;
-	wlvif->channel_type = cfg80211_get_chandef_type(&bss_conf->chandef);
+	wlvif->channel_type = cfg80211_get_chandef_type(&bss_conf->chanreq.oper);
 	wlvif->beacon_int = bss_conf->beacon_int;
 	wlvif->wmm_enabled = bss_conf->qos;
 
@@ -2924,7 +2924,7 @@ static int wlcore_unset_assoc(struct cc33xx *wl, struct cc33xx_vif *wlvif)
 		struct ieee80211_vif *vif = cc33xx_wlvif_to_vif(wlvif);
 
 		cc33xx_cmd_stop_channel_switch(wl, wlvif);
-		ieee80211_chswitch_done(vif, false);
+		ieee80211_chswitch_done(vif, false, 0);
 		cancel_delayed_work(&wlvif->channel_switch_work);
 	}
 
@@ -4122,7 +4122,7 @@ static void cc33xx_bss_info_changed_sta(struct cc33xx *wl,
 
 	/* Handle new association with HT. Do this after join. */
 	if (sta_exists) {
-		bool enabled = bss_conf->chandef.width != 
+		bool enabled = bss_conf->chanreq.oper.width != 
 						NL80211_CHAN_WIDTH_20_NOHT;
 		cc33xx_debug(DEBUG_CMD, "+++Debug wlcore_hw_set_peer_cap %x",
 					wlvif->rate_set);
@@ -4968,7 +4968,7 @@ static void cc33xx_op_channel_switch(struct ieee80211_hw *hw,
 
 	if (unlikely(wl->state == WLCORE_STATE_OFF)) {
 		if (test_bit(WLVIF_FLAG_STA_ASSOCIATED, &wlvif->flags))
-			ieee80211_chswitch_done(vif, false);
+			ieee80211_chswitch_done(vif, false, 0);
 		goto out;
 	} else if (unlikely(wl->state != WLCORE_STATE_ON)) {
 		goto out;
@@ -5226,6 +5226,7 @@ static const struct ieee80211_ops cc33xx_ops = {
 	.prepare_multicast = cc33xx_op_prepare_multicast,
 	.configure_filter = cc33xx_op_configure_filter,
 	.tx = cc33xx_op_tx,
+	.wake_tx_queue = ieee80211_handle_wake_tx_queue,
 	.set_key = cc33xx_op_set_key,
 	.hw_scan = cc33xx_op_hw_scan,
 	.cancel_hw_scan = cc33xx_op_cancel_hw_scan,
@@ -5302,6 +5303,7 @@ static const struct ieee80211_ops cc33xx_ops = {
 	.prepare_multicast = cc33xx_op_prepare_multicast,
 	.configure_filter = cc33xx_op_configure_filter,
 	.tx = cc33xx_op_tx,
+	.wake_tx_queue = ieee80211_handle_wake_tx_queue,
 	.set_key = cc33xx_op_set_key,
 	.hw_scan = cc33xx_op_hw_scan,
 	.cancel_hw_scan = cc33xx_op_cancel_hw_scan,
@@ -6019,7 +6021,7 @@ int wlcore_probe(struct cc33xx *wl, struct platform_device *pdev)
 	return ret;
 }
 
-int wlcore_remove(struct platform_device *pdev)
+void wlcore_remove(struct platform_device *pdev)
 {
 	struct wlcore_platdev_data *pdev_data = dev_get_platdata(&pdev->dev);
 	struct cc33xx *wl = platform_get_drvdata(pdev);
@@ -6046,7 +6048,6 @@ int wlcore_remove(struct platform_device *pdev)
 
 out:
 	wlcore_free_hw(wl);
-	return 0;
 }
 
 static int cc33xx_load_ini_bin_file(struct device *dev,
diff --git a/net/mac80211/mlme.c b/net/mac80211/mlme.c
index 347cf4c1d32f..fd7434995a47 100644
--- a/net/mac80211/mlme.c
+++ b/net/mac80211/mlme.c
@@ -1447,9 +1447,6 @@ static size_t ieee80211_assoc_link_elems(struct ieee80211_sub_if_data *sdata,
 	int present_elems_len = 0;
 	u8 *pos;
 	int i;
-	u8 opmode_notif = 0; 
-	u8 rx_nss = 0; 
-	u8 rx_nss_type = 0;
 
 #define ADD_PRESENT_ELEM(id) do {					\
 	/* need a last for termination - we use 0 == SSID */		\
@@ -1558,25 +1555,6 @@ static size_t ieee80211_assoc_link_elems(struct ieee80211_sub_if_data *sdata,
 					     &assoc_data->link[link_id].ap_vht_cap,
 					     &assoc_data->link[link_id].conn);
 
-		//Add operation mode notification element when operating at 20 MHz bandwidth
-		if(chanctx_conf->def.width == NL80211_CHAN_WIDTH_20)
-		{
-			/*  Operating Mode Notification element */
-			rx_nss = 0;
-			rx_nss_type= 0;
-			opmode_notif |= IEEE80211_OPMODE_NOTIF_CHANWIDTH_20MHZ; 
-			rx_nss <<= IEEE80211_OPMODE_NOTIF_RX_NSS_SHIFT;
-			rx_nss_type <<= (IEEE80211_OPMODE_NOTIF_RX_NSS_SHIFT + 3);
-			opmode_notif |= rx_nss;
-			opmode_notif |= rx_nss_type;
-
-			pos = skb_put(skb, 2 + sizeof(u8));
-
-			*pos++ = WLAN_EID_OPMODE_NOTIF;
-			*pos++ = sizeof(u8);
-			*pos++ = opmode_notif;
-		}
-
 		if (link)
 			link->conf->mu_mimo_owner = mu_mimo_owner;
 		ADD_PRESENT_ELEM(WLAN_EID_VHT_CAPABILITY);
@@ -1853,7 +1831,6 @@ static int ieee80211_send_assoc(struct ieee80211_sub_if_data *sdata)
 		/* HT, VHT, HE, EHT */
 		size += 2 + sizeof(struct ieee80211_ht_cap);
 		size += 2 + sizeof(struct ieee80211_vht_cap);
-		size += 2 + sizeof(u8); /*VHT operating mode Notification elem*/
 		size += 2 + 1 + sizeof(struct ieee80211_he_cap_elem) +
 			sizeof(struct ieee80211_he_mcs_nss_supp) +
 			IEEE80211_HE_PPE_THRES_MAX_LEN;
diff --git a/net/mac80211/util.c b/net/mac80211/util.c
index 5c6bd47461c8..77638e965726 100644
--- a/net/mac80211/util.c
+++ b/net/mac80211/util.c
@@ -1202,6 +1202,7 @@ static int ieee80211_put_preq_ies_band(struct sk_buff *skb,
 	int i, err;
 	size_t noffset;
 	u32 rate_flags;
+	bool have_80mhz = false;
 
 	*offset = 0;
 
-- 
2.34.1

